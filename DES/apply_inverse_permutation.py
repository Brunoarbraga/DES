INVERSE_PERMUTATION_TABLE = ['40 ', '8 ', '48 ', '16 ', '56 ', '24 ', '64 ', '32',
			     '39 ', '7 ', '47 ', '15 ', '55 ', '23 ', '63 ', '31',
			     '38 ', '6 ', '46 ', '14 ',  '54 ', '22 ', '62 ', '30',
			     '37 ', '5 ', '45 ', '13 ', '53 ', '21 ', '61 ', '29',
			     '36 ', '4 ', '44 ', '12 ', '52 ', '20 ', '60 ', '28',
			     '35 ', '3 ', '43 ', '11 ', '51 ', '19 ', '59 ', '27', 
			     '34 ', '2 ', '42 ', '10 ', '50 ', '18 ', '58 ', '26',
			     '33 ', '1 ', '41 ', '9 ', '49 ', '17 ', '57 ', '25']


def apply_initial_p(INVERSE_P_TABLE, ROUND_OUT):
	cipher = ""
	for index in INVERSE_P_TABLE:
		cipher += ROUND_OUT[int(index)-1]
	return cipher
# Suppose

R16 = '11001100000000001100110011111111'  
L16 = '11110000101010101111000010101010'

cipher = apply_initial_p(INVERSE_PERMUTATION_TABLE, R16+L16)

#print cipher,len(cipher)
# Ouptput
# 0000000100100011010001010110011110001001101010111100110111101111 64